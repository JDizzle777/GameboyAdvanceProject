// game_state.h
// Global structure to record all game state.
// This file was automatically generated by Spritely 

#ifndef _GAME_STATE_H_
#define _GAME_STATE_H_

#include "animation.h"
#include "sprites.h"
#include "background_maps.h"

// max enemies in a screen
const int MAX_ENEMIES = 5;

// The levels in our game.
const int kLevel_1 = 1;

// The objects in our game.
// Only 128 objects (0-127) can be defined at any time.
const int kObj_Player = 0;
const int kObj_Alien[5] = {1, 2, 3, 4, 5};
const int kObj_Monster[5] = {6, 7, 8, 9, 10};
const int kObj_Laser[5] = {11, 12, 13, 14, 15};
const int kObj_playerLaser = 16;

// The GameState class holds all of the global game state information.
class GameState {
public:
	// Constructor
	// This method initializes the game state.
	GameState();

	// SetupStage
	// Set up the stage (backgrounds, sprites) for the each level.
	void SetupStage(int level);
	void SetupStage_Level1();
	
	// Update
	// This is called continuously to update the game to the next state.
	void Update();
	void Update_Level1();
	
private:
   // the current iteration of the update function
   int frame;
   int timer;

	// The current level of the game.
	int _level;
	
	// The (x,y) location of the object representing the player.
	int _xPlayer, _yPlayer;

   // keep track of direction switching for the player (0 for left, 1 for right)
   int currDirection, prevDirection;

   // the (x,y) location of enemies and height
   int _xAlien[MAX_ENEMIES], _yAlien[MAX_ENEMIES], _xMonster[MAX_ENEMIES], _yMonster[MAX_ENEMIES];
   int alienHeight, monsterHeight;

   // enemies jumping?
   bool alienJumping[MAX_ENEMIES], monsterJumping[MAX_ENEMIES], alienPlatform[MAX_ENEMIES], monsterPlatform[MAX_ENEMIES];
   int monsterYVelocity[MAX_ENEMIES], alienYVelocity[MAX_ENEMIES];

   // keep track of direction switching for aliens and monsters (0 for left, 1 for right)
   int curAlienDir[MAX_ENEMIES], prevAlienDir[MAX_ENEMIES], curMonsterDir[MAX_ENEMIES], prevMonsterDir[MAX_ENEMIES];

   // keeps track of the number of each enemy on the screen
   int numAlien, numMonster; 

   // Keep track of the current animation state of the player.
   AnimationInfo animatePlayer;

   // player's/enemies' health points
   int playerHP;

   // Height of the player sprite.
   int _yPlayerHeight;

   // The y-coord of ground level.
   int _yGroundLevel;

   // Is the player currently jumping?
   bool _isjumping;

   // is the player currently shooting?
   bool _isShooting;

   // is the player currently standing on a platform?
   bool onPlatform;

   // Current jump velocity.
   int _yVelocity;

   // Do we have a projectile in motion?
   bool _has_projectile[MAX_ENEMIES];
    
   // The (x,y) location of the projectiles.
   int _xLaser[MAX_ENEMIES], _yLaser[MAX_ENEMIES];
   int playerLaserX, playerLaserY;

   // the direction of the lasers
   int laserDirection[MAX_ENEMIES];
   int playerLaserDir;
};

#endif	// _GAME_STATE_H_
